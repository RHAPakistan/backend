swagger: "2.0"
info:
  title: "RHA Pakistan"
  version: "1.0.0"
  description: "The Robin Hood Army is a volunteer-based Zero funds organization that works to get surplus food from restaurants to the less fortunate sections of society in cities across India and 14 other countries."
tags:
  - name: "Provider"
    description: "Restaurants and users that want to donate food."
  - name: "Volunteer"
    description: "Users required to manage the delivery of foods."
  - name: "Admin"
    description: "Users required to manage the whole system."
paths:
  /api/provider/register:
    post:
      tags:
        - "Provider"
      summary: "Register a user as a food provider"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body parameters"
          description: "User provides data to register himself/herself as a food provider."
          required: true
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              email:
                type: "string"
              cnic:
                type: "string"
              dateOfBirth:
                type: "string"
              contactNumber:
                type: "string"
              gender:
                enum: ["male","female"]
              address:
                type: "string"
              password:
                type: "string"
              ongoing_pickup:
                example: false
      responses:
        200:
          description: "Request Processed Successfully. Provides auth token in return."
          schema:
            type: "object"
            properties:
              _id:
                type: "string"
              name:
                type: "string"
              email:
                type: "string"
              token:
                type: "string"
              message:
                example: "Request Processed Successfully"
        400:
          description: "Invalid Data Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Data Provided"
        409:
          description: "User Already Exists"
          schema:
            type: "object"
            properties:
              message:
                example: "User Already Exists"
  /api/provider/signin:
    post:
      tags:
        - "Provider"
      summary: "Verifies if user already exists, and assigns authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body parameters"
          description: "Provides authentication token if user is already registered."
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Request Processed Successfully. Provides auth token in return."
          schema:
            type: "object"
            properties:
              _id:
                type: "string"
              name:
                type: "string"
              email:
                type: "string"
              contactNumber:
                type: "string"
              token:
                type: "string"
              message:
                example: "Request Processed Successfully"
        400:
          description: "Invalid Data Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Credentials Provided"
  /api/provider/auth/forgot:
    post:
      tags:
        - "Provider"
      summary: "Generates an OTP if user has forgotten his/her password."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          example: "User Email"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/provider/auth/forgot/verifyOTP:
    post:
      tags:
        - "Provider"
      summary: "Verifies an OTP if user has forgotten his/her password."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
            otp:
              type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        401:
          description: "Invalid OTP"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid OTP"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/provider/auth/forgot/changePassword:
    post:
      tags:
        - "Provider"
      summary: "Save a new password for user who has verified the OTP."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
            newPassword:
              type: "string"
            otp:
              type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        401:
          description: "Invalid OTP"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid OTP"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/provider/:id:
    get:
      tags:
        - "Provider"
      summary: "Get data of a User if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Provider id"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              contactNumber:
                type: "string"
              email:
                type: "string"
              password:
                type: "string"
              cnic:
                type: "String"
              dateOfBirth:
                type: "string"
              address:
                type: "string"
              gender:
                type: "string"
              ongoing_pickup:
                example: false
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
    delete:
      tags:
        - "Provider"
      summary: "Delete a User if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Provider id"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
    patch:
      tags:
        - "Provider"
      summary: "Update data of a User if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Provider id"
        - in: "body"
          name: "body parameters"
          required: true
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              contactNumber:
                type: "string"
              email:
                type: "string"
              password:
                type: "string"
              cnic:
                type: "String"
              dateOfBirth:
                type: "string"
              address:
                type: "string"
              gender:
                type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/provider/pickup/{id}:
    get:
      tags:
        - "Provider"
      summary: "Get data of a Pickup if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Pickup id"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              provider:
                type: "string"
              admin:
                type: "string"
              volunteer:
                type: "string"
              provider_phone:
                type: "string"
              description:
                type: "string"
              pickupAddress:
                type: "string"
              deliveryAddress:
                type: "string"
              placementTime:
                type: "string"
              acceptanceTime:
                type: "string"
              pickUpTime:
                type: "string"
              cancelTime:
                type: "string"
              deliveryTime:
                type: "string"
              amountOfFood:
                type: "string"
              typeOfFood:
                type: "string"
              broadcast:
                type: "string"
              status:
                example: 1
              pickupCoordinate:
                type: "object"
                properties:
                  type:
                    example: "Point"
                  cordinates:
                    type: "array"
                    items:
                      type: "integer"
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "Pickup Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "Pickup Not Found"
    delete:
      tags:
        - "Provider"
      summary: "Delete a Pickup if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Pickup id"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "Pickup Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "Pickup Not Found"
    patch:
      tags:
        - "Provider"
      summary: "Update data of a Pickup if exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Pickup id"
        - in: "body"
          name: "body parameters"
          required: true
          schema:
            type: "object"
            properties:
              provider:
                type: "string"
              pickupAddress: 
                type: "string"
              phone: 
                type: "string"
              description: 
                type: "string"
              placementTime: 
                type: "string"
              amountOfFood: 
                type: "string"
              typeOfFood: 
                type: "string"
              broadcast:
                example: true
              status:
                example: 0
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        404:
          description: "Pickup Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "Pickup Not Found"
  /api/provider/pickup/register:
    post:
      tags:
        - "Provider"
      summary: "Create a Pickup if not exists. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Pickup id"
        - in: "body"
          name: "body parameters"
          required: true
          schema:
            type: "object"
            properties:
              provider:
                type: "string"
              pickupAddress: 
                type: "string"
              phone: 
                type: "string"
              description: 
                type: "string"
              placementTime: 
                type: "string"
              amountOfFood: 
                type: "string"
              typeOfFood: 
                type: "string"
              broadcast:
                example: true
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              provider:
                type: "string"
              pickupAddress: 
                type: "string"
              phone: 
                type: "string"
              description: 
                type: "string"
              placementTime: 
                type: "string"
              amountOfFood: 
                type: "string"
              typeOfFood: 
                type: "string"
              broadcast:
                example: true
              status:
                example: 0
              message:
                example: "Request Processed Successfully"
        400:
          description: "Token Not Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Token Not Provided"
        401:
          description: "Invalid Token"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Token"
        409:
          description: "Pickup Already Exists"
          schema:
            type: "object"
            properties:
              message:
                example: "Pickup Already Exists"
  /api/volunteer/placeInductionRequest:
    post:
      tags:
        - "Volunteer"
      summary: "Register a user as a food volunteer"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body parameters"
          description: "User provides data to register himself/herself as a food provider."
          required: true
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              email:
                type: "string"
              cnic:
                type: "string"
              dob:
                type: "string"
              contactNumber:
                type: "string"
              gender:
                type: "string"
              occupation:
                type: "string"
              address:
                type: "string"
              emergencyContact:
                type: "string"
              relationEmergency:
                type: "string"
              fbLink:
                type: "string"
              isVacinated:
                type: "string"
              medicalCondition:
                type: "string"
              heardRHAwhere:
                type: "string"
              contactsInRha:
                type: "string"
              volunteeredOrganizations:
                type: "string"
              reasonForApply:
                type: "string"
              skills:
                type: "string"
              pickupTiming:
                type: "string"
              questions:
                type: "string"
      responses:
        200:
          description: "Request Processed Successfully. Provides auth token in return."
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
              user:
                type: "object"
                properties:
                  fullName:
                    type: "string"
                  email:
                    type: "string"
                  cnic:
                    type: "string"
                  dob:
                    type: "string"
                  contactNumber:
                    type: "string"
                  gender:
                    type: "string"
                  occupation:
                    type: "string"
                  address:
                    type: "string"
                  emergencyContact:
                    type: "string"
                  relationEmergency:
                    type: "string"
                  fbLink:
                    type: "string"
                  isVacinated:
                    type: "string"
                  medicalCondition:
                    type: "string"
                  heardRHAwhere:
                    type: "string"
                  contactsInRha:
                    type: "string"
                  volunteeredOrganizations:
                    type: "string"
                  reasonForApply:
                    type: "string"
                  skills:
                    type: "string"
                  pickupTiming:
                    type: "string"
                  questions:
                    type: "string"
        400:
          description: "Invalid Data Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Data Provided"
        409:
          description: "User Already Exists"
          schema:
            type: "object"
            properties:
              message:
                example: "User Already Exists"
  /api/volunteer/login:
    post:
      tags:
        - "Volunteer"
      summary: "Verifies if user already exists, and assigns authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body parameters"
          description: "Provides authentication token if user is already registered."
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Request Processed Successfully. Provides auth token in return."
          schema:
            type: "object"
            properties:
              _id:
                type: "string"
              name:
                type: "string"
              email:
                type: "string"
              contactNumber:
                type: "string"
              token:
                type: "string"
              message:
                example: "Request Processed Successfully"
              activePickups:
                type: "array"
                items:
                  type: "object"
                  properties:
                    provider:
                      type: "string"
                    admin:
                      type: "string"
                    volunteer:
                      type: "string"
                    provider_phone:
                      type: "string"
                    description:
                      type: "string"
                    pickupAddress:
                      type: "string"
                    deliveryAddress:
                      type: "string"
                    placementTime:
                      type: "string"
                    acceptanceTime:
                      type: "string"
                    pickUpTime:
                      type: "string"
                    cancelTime:
                      type: "string"
                    deliveryTime:
                      type: "string"
                    amountOfFood:
                      type: "string"
                    typeOfFood:
                      type: "string"
                    broadcast:
                      type: "string"
                    status:
                      example: 1
                    pickupCoordinate:
                      type: "object"
                      properties:
                        type:
                          example: "Point"
                        cordinates:
                          type: "array"
                          items:
                            type: "integer"
              pickupHistory:
                type: "array"
                items:
                  type: "object"
                  properties:
                    provider:
                      type: "string"
                    admin:
                      type: "string"
                    volunteer:
                      type: "string"
                    provider_phone:
                      type: "string"
                    description:
                      type: "string"
                    pickupAddress:
                      type: "string"
                    deliveryAddress:
                      type: "string"
                    placementTime:
                      type: "string"
                    acceptanceTime:
                      type: "string"
                    pickUpTime:
                      type: "string"
                    cancelTime:
                      type: "string"
                    deliveryTime:
                      type: "string"
                    amountOfFood:
                      type: "string"
                    typeOfFood:
                      type: "string"
                    broadcast:
                      type: "string"
                    status:
                      type: "integer"
                    pickupCoordinate:
                      type: "object"
                      properties:
                        type:
                          example: "Point"
                        cordinates:
                          type: "array"
                          items:
                            type: "integer"
        400:
          description: "Invalid Data Provided"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid Credentials Provided"
  /api/volunteer/auth/forgot:
    post:
      tags:
        - "Volunteer"
      summary: "Generates an OTP if user has forgotten his/her password."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          example: "User Email"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/volunteer/auth/forgot/verifyOTP:
    post:
      tags:
        - "Volunteer"
      summary: "Verifies an OTP if user has forgotten his/her password."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
            otp:
              type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        401:
          description: "Invalid OTP"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid OTP"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/volunteer/auth/forgot/changePassword:
    post:
      tags:
        - "Volunteer"
      summary: "Save a new password for user who has verified the OTP."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "email"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
            newPassword:
              type: "string"
            otp:
              type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              message:
                example: "Request Processed Successfully"
        401:
          description: "Invalid OTP"
          schema:
            type: "object"
            properties:
              message:
                example: "Invalid OTP"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"
  /api/volunteer/editProfile/{id}:
    patch:
      tags:
        - "Volunteer"
      summary: "Edit Profile details of volunteer. Requires authentication token."
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "headers"
          name: "authentication"
          required: true
          schema:
            example: "Auth token"
        - in: "path"
          name: "id"
          required: true
          schema:
            example: "Pickup id"
        - in: "body"
          name: "body parameters"
          required: true
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              contactNumber:
                type: "string"
              email:
                type: "string"
              cnic:
                type: "string"
              dateOfBirth:
                type: "string"
              address:
                type: "string"
              gender:
                type: "string"
      responses:
        200:
          description: "Request Processed Successfully"
          schema:
            type: "object"
            properties:
              fullName:
                type: "string"
              contactNumber:
                type: "string"
              email:
                type: "string"
              cnic:
                type: "string"
              dateOfBirth:
                type: "string"
              address:
                type: "string"
              gender:
                type: "string"
              role:
                type: "string"
              ongoing_pickup:
                type: "boolean"
              location:
                type: "object"
                properties:
                  type: "object"
                  properties:
                    type:
                      example: "Point"
                    coordinates:
                      type: "array"
                      items:
                        type: "integer"
              message:
                example: "Request Processed Successfully"
        404:
          description: "User Not Found"
          schema:
            type: "object"
            properties:
              message:
                example: "User Not Found"